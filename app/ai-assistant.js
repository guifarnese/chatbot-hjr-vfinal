const axios = require('axios');
const FormData = require('form-data');

class AIAssistant {
  constructor() {
    this.apiKey = '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';
    this.apiUrl = 'https://api.openai.com/v1/chat/completions';
  }

  async generateResponse(context, userMessage, conversationState) {
    try {
      const systemPrompt = this.buildSystemPrompt(context, conversationState);
      
      const response = await axios.post(this.apiUrl, {
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        max_tokens: 300,
        temperature: 0.7
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data.choices[0].message.content.trim();
    } catch (error) {
      console.error('Erro na API do ChatGPT:', error.message);
      return this.getFallbackResponse(conversationState, context);
    }
  }

  // Transcreve √°udio com Whisper
  async transcribeAudio(media) {
    try {
      console.log('üéôÔ∏è Iniciando transcri√ß√£o de √°udio...');
      
      if (!media || !media.data) {
        console.error('‚ùå Dados de m√≠dia inv√°lidos');
        return '';
      }
      
      const audioBuffer = Buffer.from(media.data, 'base64');
      console.log(`üìä Tamanho do buffer de √°udio: ${audioBuffer.length} bytes`);
      
      const form = new FormData();
      form.append('model', 'whisper-1');
      form.append('language', 'pt');
      form.append('temperature', '0');
      form.append('file', audioBuffer, {
        filename: 'audio.ogg',
        contentType: media.mimetype || 'audio/ogg'
      });

      console.log('üì§ Enviando para API Whisper...');
      
      const response = await axios.post('https://api.openai.com/v1/audio/transcriptions', form, {
        headers: {
          Authorization: `Bearer ${this.apiKey}`,
          ...form.getHeaders()
        },
        timeout: 30000 // 30 segundos de timeout
      });

      console.log('‚úÖ Resposta recebida da API Whisper');
      
      if (response.data && response.data.text) {
        const transcription = response.data.text.trim();
        console.log(`üìù Transcri√ß√£o final: "${transcription}"`);
        return transcription;
      } else {
        console.log('‚ö†Ô∏è Resposta da API sem texto de transcri√ß√£o');
        return '';
      }
    } catch (error) {
      console.error('‚ùå Erro ao transcrever √°udio:', error.message);
      if (error.response) {
        console.error('üìä Status:', error.response.status);
        console.error('üìä Dados:', error.response.data);
      }
      return '';
    }
  }



  buildSystemPrompt(context, conversationState) {
    const basePrompt = `Voc√™ √© a RefriAgroBot, assistente virtual da RefriAgro LTDA, especialista em refrigera√ß√£o para agropecu√°ria.

# CONTEXTO DA EMPRESA:
- Empresa: RefriAgro LTDA
- Especialidade: Refrigera√ß√£o para agropecu√°ria
- Hor√°rio de funcionamento: Segunda a sexta, 8h √†s 17h
- Servi√ßos: Reparo, manuten√ß√£o, pe√ßas, or√ßamentos para equipamentos de refrigera√ß√£o

# TOM DE VOZ PROFISSIONAL:
- Seja profissional como uma recepcionista de loja de manuten√ß√£o
- Use linguagem t√©cnica mas acess√≠vel
- Mantenha tom respeitoso e eficiente
- Evite express√µes muito informais como "Sinto muito em ouvir"
- Seja direto e objetivo, mas cordial

# REGRAS CR√çTICAS:
1. SEMPRE chame o cliente pelo nome quando dispon√≠vel (ex: "Gabriel!" em vez de "Ol√°!")
2. NUNCA repita "Ol√°" se j√° foi dito na conversa - use apenas o nome ou seja direto
3. NUNCA repita perguntas j√° feitas - verifique o contexto
4. Colete informa√ß√µes progressivamente e detalhadamente
5. Para problemas t√©cnicos, pe√ßa: descri√ß√£o detalhada, fotos, v√≠deos, h√° quanto tempo, sintomas espec√≠ficos
6. Qualifique o cliente 100% antes de finalizar
7. Se for segunda mensagem ou mais, N√ÉO use "Ol√°" - seja direto
8. NUNCA use "te ajudar" - use "ajud√°-lo" ou "ajud√°-la"
9. Seja PROFISSIONAL como uma recepcionista t√©cnica
10. SEMPRE verifique se o cliente respondeu TODAS as perguntas feitas
11. Se alguma informa√ß√£o importante estiver faltando, pergunte especificamente sobre ela
12. NUNCA pergunte se √© cliente novo ou existente - use os dados do banco automaticamente

# DADOS DO CLIENTE ATUAL:
${this.formatCustomerContext(context)}

# ESTADO ATUAL DA CONVERSA:
${this.getStateInstructions(conversationState)}

# HIST√ìRICO DA CONVERSA:
${this.formatConversationHistory(context)}

# VERIFICA√á√ÉO DE INFORMA√á√ïES FALTANTES:
${this.checkMissingInformation(context, conversationState)}

Responda de forma profissional e eficiente, sempre considerando o contexto e evitando repeti√ß√µes.`;

    return basePrompt;
  }

  formatCustomerContext(context) {
    if (!context || Object.keys(context).length === 0) {
      return '- Cliente novo, sem dados pr√©vios';
    }

    let contextStr = '';
    
    if (context.customerName) {
      contextStr += `- Nome: ${context.customerName}\n`;
    }
    
    if (context.isKnownCustomer !== undefined) {
      contextStr += `- Tipo: ${context.isKnownCustomer ? 'Cliente existente' : 'Novo cliente'}\n`;
    }
    
    if (context.location) {
      contextStr += `- Localiza√ß√£o: ${context.location}\n`;
    }
    
    if (context.equipmentType) {
      contextStr += `- Equipamento mencionado: ${context.equipmentType}\n`;
    }
    
    if (context.equipmentBrand) {
      contextStr += `- Marca: ${context.equipmentBrand}\n`;
    }
    
    if (context.knownEquipments && context.knownEquipments.length > 0) {
      contextStr += `- Equipamentos cadastrados: ${context.knownEquipments.map(eq => `${eq.tipo_equipamento} ${eq.marca}`).join(', ')}\n`;
    }
    
    if (context.warrantyStatus) {
      contextStr += `- Status da garantia: ${context.warrantyStatus.isUnderWarranty ? 'Em garantia' : 'Fora da garantia'}\n`;
    }

    return contextStr || '- Dados limitados do cliente';
  }

  formatConversationHistory(context) {
    if (!context || Object.keys(context).length === 0) {
      return '- Primeira intera√ß√£o';
    }

    let history = [];
    
    if (context.hasAskedForName) {
      history.push('Nome do cliente foi solicitado');
    }
    
    if (context.customerName) {
      history.push(`Cliente se identificou como: ${context.customerName}`);
    }
    
    if (context.hasAskedForLocation) {
      history.push('Localiza√ß√£o foi perguntada');
    }
    
    if (context.location) {
      history.push(`Cliente informou localiza√ß√£o: ${context.location}`);
    }
    
    if (context.hasAskedForEquipmentType) {
      history.push('Tipo de equipamento foi perguntado');
    }
    
    if (context.equipmentType) {
      history.push(`Cliente mencionou equipamento: ${context.equipmentType}`);
    }
    
    if (context.hasAskedForEquipmentBrand) {
      history.push('Marca do equipamento foi perguntada');
    }
    
    if (context.equipmentBrand) {
      history.push(`Cliente informou marca: ${context.equipmentBrand}`);
    }
    
    if (context.hasAskedForPurchaseDate) {
      history.push('Data de compra foi perguntada');
    }
    
    if (context.purchaseDate) {
      history.push(`Cliente informou data de compra: ${context.purchaseDate}`);
    }
    
    if (context.hasQualifiedDemand) {
      history.push('Demanda foi qualificada');
    }
    
    if (context.hasCollectedDetails) {
      history.push('Detalhes do problema foram coletados');
    }
    
    if (context.problemDescription) {
      history.push(`Problema descrito: ${context.problemDescription}`);
    }
    
    if (context.hasCollectedLocation) {
      history.push('Informa√ß√µes de localiza√ß√£o para servi√ßo foram coletadas');
    }

    return history.length > 0 ? history.join('\n') : '- Conversa iniciada';
  }

  getStateInstructions(conversationState) {
    const stateInstructions = {
      'initial': 'Primeira intera√ß√£o - Cumprimente profissionalmente e pergunte como pode ajudar. Use o nome se dispon√≠vel.',
      'customer_identification': 'Identifica√ß√£o do cliente - Pergunte o nome de forma profissional e direta. N√ÉO use "Ol√°" se n√£o for primeira mensagem.',
      'customer_qualification': 'Qualifica√ß√£o do cliente - Use dados do banco automaticamente. Se faltar localiza√ß√£o, pergunte especificamente. N√ÉO use "Ol√°".',
      'equipment_analysis': 'An√°lise de equipamentos - Pergunte especificamente qual equipamento precisa de aten√ß√£o. Use dados do banco se dispon√≠vel. N√ÉO use "Ol√°".',
      'demand_qualification': 'Qualifica√ß√£o da demanda - Entenda o problema espec√≠fico. Pe√ßa detalhes t√©cnicos, fotos, v√≠deos. N√ÉO use "Ol√°".',
      'investigating': 'Investiga√ß√£o profunda - Colete TODOS os detalhes: sintomas, tempo, fotos, v√≠deos, tentativas de solu√ß√£o. N√ÉO use "Ol√°".',
      'detailing': 'Detalhamento final - Colete informa√ß√µes para agendamento: localiza√ß√£o, hor√°rios, contatos. N√ÉO use "Ol√°".',
      'confirming': 'Confirma√ß√£o - Confirme todos os dados coletados e explique pr√≥ximos passos. N√ÉO use "Ol√°".',
      'closing': 'Encerramento - Agrade√ßa profissionalmente e confirme que o atendente entrar√° em contato. N√ÉO use "Ol√°".'
    };

    return stateInstructions[conversationState] || 'Estado n√£o reconhecido';
  }

  getFallbackResponse(conversationState, context) {
    const customerName = context?.customerName || 'Cliente';
    
    const fallbackResponses = {
      'initial': `${customerName}! Sou a RefriAgroBot. Como posso ajud√°-lo hoje?`,
      'customer_identification': `Para que possamos atend√™-lo adequadamente, qual √© o seu nome?`,
      'customer_qualification': this.getCustomerQualificationResponse(context),
      'equipment_analysis': `${customerName}, qual equipamento precisa de aten√ß√£o hoje?`,
      'demand_qualification': `${customerName}, informe-me sobre o problema espec√≠fico que est√° enfrentando.`,
      'investigating': `${customerName}, preciso de informa√ß√µes t√©cnicas detalhadas sobre o problema. Pode me fornecer mais detalhes?`,
      'detailing': `${customerName}, para agendar o servi√ßo, preciso de algumas informa√ß√µes adicionais sobre localiza√ß√£o e disponibilidade.`,
      'confirming': `${customerName}, vou encaminhar seu pedido a um de nossos t√©cnicos especializados.`,
      'closing': `${customerName}, agrade√ßo seu contato. Nossa equipe entrar√° em contato em breve.`
    };

    return fallbackResponses[conversationState] || 'Como posso ajud√°-lo hoje?';
  }

  getCustomerQualificationResponse(context) {
    const customerName = context?.customerName || 'Cliente';
    
    // Se temos dados do cliente no banco, n√£o perguntamos se √© cliente
    if (context?.isKnownCustomer !== undefined) {
      // Verificar se falta localiza√ß√£o
      if (!context.location) {
        return `${customerName}, para que possamos atend√™-lo adequadamente, qual √© a sua localiza√ß√£o?`;
      }
      // Se tem localiza√ß√£o, perguntar sobre equipamento
      return `${customerName}, qual equipamento precisa de aten√ß√£o hoje?`;
    }
    
    // Se n√£o temos dados, perguntar localiza√ß√£o primeiro
    return `${customerName}, para que possamos atend√™-lo adequadamente, qual √© a sua localiza√ß√£o?`;
  }

  checkMissingInformation(context, conversationState) {
    if (!context) return '- Verifica√ß√£o de informa√ß√µes: Primeira intera√ß√£o';
    
    const missingInfo = [];
    
    // Verificar informa√ß√µes b√°sicas do cliente
    if (!context.customerName) {
      missingInfo.push('Nome do cliente');
    }
    
    if (!context.location) {
      missingInfo.push('Localiza√ß√£o do cliente');
    }
    
    // Verificar informa√ß√µes do equipamento (se j√° foi mencionado)
    if (context.equipmentType && !context.equipmentBrand) {
      missingInfo.push('Marca do equipamento');
    }
    
    if (context.equipmentType && !context.purchaseDate) {
      missingInfo.push('Data de compra do equipamento');
    }
    
    // Verificar informa√ß√µes do problema (se j√° foi mencionado)
    if (context.hasQualifiedDemand && !context.problemDescription) {
      missingInfo.push('Descri√ß√£o detalhada do problema');
    }
    
    if (missingInfo.length > 0) {
      return `INFORMA√á√ïES FALTANTES: ${missingInfo.join(', ')}. PERGUNTE ESPECIFICAMENTE sobre essas informa√ß√µes antes de prosseguir.`;
    }
    
    return '- Todas as informa√ß√µes necess√°rias foram coletadas';
  }

  async generateEquipmentQuestion(context, customerData) {
    const customerName = context?.customerName || 'Cliente';
    const equipments = customerData?.equipments?.map(eq => `${eq.tipo_equipamento} ${eq.marca}`).join(', ') || 'Nenhum equipamento cadastrado';
    
    const systemPrompt = `Voc√™ √© a RefriAgroBot, assistente profissional da RefriAgro LTDA.

CONTEXTO: ${customerName} tem os seguintes equipamentos cadastrados: ${equipments}.

Gere uma pergunta PROFISSIONAL perguntando qual equipamento espec√≠fico precisa de aten√ß√£o hoje.

REGRAS:
1. Use o nome do cliente sempre
2. Seja direto e profissional
3. Liste os equipamentos dispon√≠veis se houver
4. N√ÉO repita "Ol√°" se j√° foi dito
5. Seja eficiente e objetivo

Exemplo profissional: "${customerName}, vi que voc√™ tem uma geladeira Brastemp e um ar condicionado LG. Qual deles precisa de aten√ß√£o hoje?"

Responda de forma profissional e direta.`;

    try {
      const response = await axios.post(this.apiUrl, {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: 'Gere pergunta profissional sobre equipamentos' }
        ],
        max_tokens: 150,
        temperature: 0.6
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data.choices[0].message.content.trim();
    } catch (error) {
      console.error('Erro ao gerar pergunta sobre equipamentos:', error.message);
      return equipments !== 'Nenhum equipamento cadastrado' ? 
        `${customerName}, vi que voc√™ tem os seguintes equipamentos: ${equipments}. Qual deles precisa de aten√ß√£o hoje?` :
        `${customerName}, que tipo de equipamento voc√™ tem?`;
    }
  }

  async generateProblemInvestigation(context, demand) {
    const customerName = context?.customerName || 'Cliente';
    const equipment = context?.eququipmentType || demand?.equipment || 'equipamento';
    
    const systemPrompt = `Voc√™ √© a RefriAgroBot, assistente profissional da RefriAgro LTDA.

CONTEXTO: ${customerName} est√° relatando um problema com ${equipment}.

Gere uma pergunta PROFISSIONAL e DETALHADA para investigar o problema. A pergunta deve:

1. Ser direta e t√©cnica, como uma recepcionista profissional
2. Pedir informa√ß√µes espec√≠ficas:
   - Descri√ß√£o t√©cnica detalhada do problema
   - H√° quanto tempo o problema come√ßou
   - Se o equipamento parou completamente ou funciona parcialmente
   - Quais tentativas de solu√ß√£o j√° foram feitas
   - Fotos ou v√≠deos do problema (se poss√≠vel)
   - Sintomas espec√≠ficos observados

3. N√ÉO use express√µes informais como "Sinto muito em ouvir"
4. Seja eficiente e objetivo
5. Use o nome do cliente se dispon√≠vel
6. IMPORTANTE: Informe que voc√™ vai aguardar todas as informa√ß√µes antes de responder

Exemplo de tom profissional: "Para que possamos diagnosticar adequadamente o problema, preciso de algumas informa√ß√µes t√©cnicas espec√≠ficas sobre sua ${equipment}. Vou aguardar todas as informa√ß√µes que voc√™ puder enviar antes de responder."

Responda de forma profissional e t√©cnica.`;

    try {
      const response = await axios.post(this.apiUrl, {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: 'Gere pergunta profissional para investigar o problema' }
        ],
        max_tokens: 250,
        temperature: 0.6
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data.choices[0].message.content.trim();
    } catch (error) {
      console.error('Erro ao gerar investiga√ß√£o do problema:', error.message);
      return `${customerName}, para que possamos diagnosticar adequadamente o problema com sua ${equipment}, preciso de algumas informa√ß√µes t√©cnicas espec√≠ficas. Pode me informar h√° quanto tempo o problema come√ßou, se o equipamento parou completamente ou ainda funciona parcialmente, e quais tentativas de solu√ß√£o voc√™ j√° fez? Se poss√≠vel, fotos ou v√≠deos do problema seriam muito √∫teis para nossa an√°lise. Vou aguardar todas as informa√ß√µes antes de responder.`;
    }
  }

  // Novos m√©todos para an√°lise de mensagens coletadas
  async generateProblemAnalysis(customerName, collectedMessages) {
    const systemPrompt = `Voc√™ √© a RefriAgroBot, assistente profissional da RefriAgro LTDA.

CONTEXTO: ${customerName} enviou m√∫ltiplas mensagens com informa√ß√µes detalhadas sobre um problema t√©cnico.

MENSAGENS COLETADAS: "${collectedMessages}"

Gere uma resposta PROFISSIONAL que:
1. Agrade√ßa pelas informa√ß√µes detalhadas
2. Confirme que entendeu o problema
3. Informe que vai encaminhar para a equipe t√©cnica
4. Explique os pr√≥ximos passos
5. Seja espec√≠fico sobre o que foi entendido

Use o nome do cliente e seja profissional como uma recepcionista t√©cnica.`;

    try {
      const response = await axios.post(this.apiUrl, {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: 'Analise as mensagens e gere resposta profissional' }
        ],
        max_tokens: 300,
        temperature: 0.6
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data.choices[0].message.content.trim();
    } catch (error) {
      console.error('Erro ao gerar an√°lise de problema:', error.message);
      return `${customerName}, obrigado pelas informa√ß√µes detalhadas sobre o problema. Entendi que ${collectedMessages}. Vou encaminhar tudo para nossa equipe t√©cnica que entrar√° em contato em breve para agendar o servi√ßo.`;
    }
  }

  async generateEquipmentAnalysis(customerName, collectedMessages) {
    const systemPrompt = `Voc√™ √© a RefriAgroBot, assistente profissional da RefriAgro LTDA.

CONTEXTO: ${customerName} enviou m√∫ltiplas mensagens com informa√ß√µes sobre equipamento.

MENSAGENS COLETADAS: "${collectedMessages}"

Gere uma resposta PROFISSIONAL que:
1. Confirme as informa√ß√µes do equipamento
2. Pe√ßa detalhes sobre o problema espec√≠fico
3. Seja t√©cnica mas acess√≠vel
4. Use o nome do cliente

Use o nome do cliente e seja profissional como uma recepcionista t√©cnica.`;

    try {
      const response = await axios.post(this.apiUrl, {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: 'Analise as mensagens e gere resposta profissional' }
        ],
        max_tokens: 250,
        temperature: 0.6
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data.choices[0].message.content.trim();
    } catch (error) {
      console.error('Erro ao gerar an√°lise de equipamento:', error.message);
      return `${customerName}, entendi as informa√ß√µes sobre seu equipamento. Agora preciso de mais detalhes sobre o problema espec√≠fico que est√° enfrentando. Pode me descrever o que est√° acontecendo?`;
    }
  }

  async generateLocationAnalysis(customerName, collectedMessages) {
    const systemPrompt = `Voc√™ √© a RefriAgroBot, assistente profissional da RefriAgro LTDA.

CONTEXTO: ${customerName} enviou m√∫ltiplas mensagens com informa√ß√µes de localiza√ß√£o.

MENSAGENS COLETADAS: "${collectedMessages}"

Gere uma resposta PROFISSIONAL que:
1. Confirme a localiza√ß√£o
2. Informe que vai verificar disponibilidade
3. Explique que um t√©cnico entrar√° em contato
4. Seja cordial e profissional

Use o nome do cliente e seja profissional como uma recepcionista t√©cnica.`;

    try {
      const response = await axios.post(this.apiUrl, {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: 'Analise as mensagens e gere resposta profissional' }
        ],
        max_tokens: 200,
        temperature: 0.6
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data.choices[0].message.content.trim();
    } catch (error) {
      console.error('Erro ao gerar an√°lise de localiza√ß√£o:', error.message);
      return `${customerName}, obrigado pelas informa√ß√µes de localiza√ß√£o. Vou verificar nossa disponibilidade para sua regi√£o e um de nossos t√©cnicos entrar√° em contato em breve para agendar o servi√ßo.`;
    }
  }

  async generateGeneralAnalysis(customerName, collectedMessages) {
    const systemPrompt = `Voc√™ √© a RefriAgroBot, assistente profissional da RefriAgro LTDA.

CONTEXTO: ${customerName} enviou m√∫ltiplas mensagens com informa√ß√µes gerais.

MENSAGENS COLETADAS: "${collectedMessages}"

Gere uma resposta PROFISSIONAL que:
1. Agrade√ßa pelas informa√ß√µes
2. Confirme que entendeu
3. Informe pr√≥ximos passos
4. Seja cordial e profissional

Use o nome do cliente e seja profissional como uma recepcionista t√©cnica.`;

    try {
      const response = await axios.post(this.apiUrl, {
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: 'Analise as mensagens e gere resposta profissional' }
        ],
        max_tokens: 200,
        temperature: 0.6
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data.choices[0].message.content.trim();
    } catch (error) {
      console.error('Erro ao gerar an√°lise geral:', error.message);
      return `${customerName}, obrigado pelas informa√ß√µes. Vou analisar tudo e encaminhar para nossa equipe. Eles entrar√£o em contato em breve.`;
    }
  }
}

module.exports = AIAssistant;

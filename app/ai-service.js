const OpenAI = require('openai');
const fs = require('fs');
const path = require('path');
const config = require('../config.js');

class AIService {
  constructor() {
    this.openai = new OpenAI({
      apiKey: config.OPENAI_API_KEY,
    });
  }

  // Transcrever √°udio para texto
  async transcribeAudio(audioBuffer) {
    try {
      console.log('üéµ Transcrevendo √°udio...');

      // Salvar buffer temporariamente
      const tempPath = path.join(__dirname, '../temp_audio.ogg');
      fs.writeFileSync(tempPath, audioBuffer);

      const transcription = await this.openai.audio.transcriptions.create({
        file: fs.createReadStream(tempPath),
        model: "whisper-1",
        language: "pt"
      });

      // Limpar arquivo tempor√°rio
      fs.unlinkSync(tempPath);

      console.log('‚úÖ Transcri√ß√£o conclu√≠da:', transcription.text);
      return transcription.text;

    } catch (error) {
      console.error('‚ùå Erro na transcri√ß√£o:', error.message);
      throw error;
    }
  }

  // Analisar problema e fazer triagem
  async analyzeProblem(problemDescription, customerInfo) {
    try {
      console.log('üß† Analisando problema com IA...');

      const prompt = `
Voc√™ √© um t√©cnico especialista em equipamentos de refrigera√ß√£o que trabalha principalmente com fazendeiros. 
Analise o problema descrito e forne√ßa uma triagem detalhada usando linguagem simples e acess√≠vel.

INFORMA√á√ïES DO CLIENTE:
- Nome: ${customerInfo.name}
- Localiza√ß√£o: ${customerInfo.location}

PROBLEMA DESCRITO:
${problemDescription}

Por favor, forne√ßa uma an√°lise estruturada com:

1. **Tipo de Problema**: Classifique o problema (ex: vazamento, n√£o gelar, barulho, etc.)
2. **Gravidade**: Baixa, M√©dia, Alta ou Cr√≠tica
3. **Poss√≠veis Causas**: Liste as causas mais prov√°veis em linguagem simples
4. **Pe√ßas Provavelmente Necess√°rias**: Quais pe√ßas podem ser necess√°rias (use nomes populares)
5. **Tempo Estimado de Reparo**: Tempo aproximado para solu√ß√£o
6. **Recomenda√ß√µes**: Orienta√ß√µes pr√°ticas para o cliente
7. **Prioridade de Atendimento**: Urgente, Normal ou Baixa

IMPORTANTE: Use linguagem simples, evite termos t√©cnicos complexos. Seja direto e pr√°tico, como se estivesse conversando com um fazendeiro. Mantenha a qualidade t√©cnica da an√°lise, mas explique de forma que qualquer pessoa entenda.
`;

      const completion = await this.openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um t√©cnico especialista em equipamentos de refrigera√ß√£o com 20 anos de experi√™ncia, que trabalha principalmente com fazendeiros. Use linguagem simples, direta e acess√≠vel, evitando termos t√©cnicos complexos. Seja pr√°tico e objetivo."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 1000,
        temperature: 0.7
      });

      const analysis = completion.choices[0].message.content;
      console.log('‚úÖ An√°lise conclu√≠da');

      return analysis;

    } catch (error) {
      console.error('‚ùå Erro na an√°lise:', error.message);
      throw error;
    }
  }

  // Gerar perguntas para explorar melhor o problema
  async generateFollowUpQuestions(problemDescription, customerInfo) {
    try {
      console.log('‚ùì Gerando perguntas de explora√ß√£o...');

      const prompt = `
Com base no problema descrito, gere 3-5 perguntas espec√≠ficas para explorar melhor o problema.

PROBLEMA INICIAL:
${problemDescription}

CLIENTE: ${customerInfo.name} - ${customerInfo.location}

IMPORTANTE: O cliente √© um fazendeiro com pouca escolaridade. Use linguagem simples, direta e informal. Evite termos t√©cnicos. Fa√ßa perguntas como se estivesse conversando com um amigo.

Gere perguntas que ajudem a:
- Entender melhor os sintomas (de forma simples)
- Saber quando come√ßou o problema
- Verificar como o equipamento est√° sendo usado
- Conhecer o hist√≥rico do equipamento
- Determinar se √© urgente

Responda apenas com as perguntas, uma por linha, sem numera√ß√£o. Use linguagem coloquial e acess√≠vel.
`;

      const completion = await this.openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um t√©cnico especialista em diagn√≥stico de equipamentos de refrigera√ß√£o que trabalha com fazendeiros. Use linguagem simples, informal e acess√≠vel. Evite termos t√©cnicos complexos. Seja direto e pr√°tico nas perguntas."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 300,
        temperature: 0.7
      });

      const questions = completion.choices[0].message.content;
      console.log('‚úÖ Perguntas geradas');

      return questions.split('\n').filter(q => q.trim());

    } catch (error) {
      console.error('‚ùå Erro ao gerar perguntas:', error.message);
      // Perguntas padr√£o em caso de erro
      return [
        "Quando voc√™ percebeu que tinha problema?",
        "O equipamento t√° fazendo algum barulho diferente?",
        "Voc√™ j√° tentou arrumar alguma coisa?",
        "O problema acontece sempre ou s√≥ √†s vezes?"
      ];
    }
  }

  // Verificar se a descri√ß√£o do problema est√° completa
  async isProblemDescriptionComplete(problemDescription) {
    try {
      const prompt = `
Analise se a descri√ß√£o do problema est√° completa para fazer um diagn√≥stico inicial:

DESCRI√á√ÉO:
${problemDescription}

Responda apenas com "COMPLETA" se a descri√ß√£o cont√©m:
- Que tipo de equipamento √©
- Qual √© o problema principal
- Quando come√ßou
- Se j√° tentou arrumar alguma coisa

Ou "INCOMPLETA" se falta informa√ß√£o essencial.
`;

      const completion = await this.openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um t√©cnico especialista em diagn√≥stico que trabalha com fazendeiros. Use linguagem simples e direta."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 50,
        temperature: 0.3
      });

      const response = completion.choices[0].message.content.trim();
      return response === "COMPLETA";

    } catch (error) {
      console.error('‚ùå Erro ao verificar completude:', error.message);
      // Por padr√£o, considera incompleta se houver erro
      return false;
    }
  }
}

module.exports = AIService;

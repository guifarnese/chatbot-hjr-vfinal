const SimpleChatbot = require('./app/chatbot-simple.js');

class PartsFlowTester {
  constructor() {
    this.chatbot = new SimpleChatbot();
    this.clientNumber = '+5511999999999';
  }

  async simulateMessage(message) {
    console.log(`\nüì± Cliente: "${message}"`);
    
    try {
      const response = await this.chatbot.processMessage(this.clientNumber, message);
      console.log(`ü§ñ Bot: "${response}"`);
      return response;
    } catch (error) {
      console.error(`‚ùå Erro: ${error.message}`);
      return null;
    }
  }

  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async testPartsFlow() {
    console.log('üß™ TESTANDO FLUXO DE SOLICITA√á√ÉO DE PE√áAS');
    console.log('==========================================');
    
    try {
      // 1. Iniciar conversa
      console.log('\n1Ô∏è‚É£ Iniciando conversa...');
      await this.simulateMessage('Oi');
      await this.delay(1000);
      
      // 2. Informar nome
      console.log('\n2Ô∏è‚É£ Informando nome...');
      await this.simulateMessage('Jo√£o Silva');
      await this.delay(1000);
      
      // 3. Informar endere√ßo
      console.log('\n3Ô∏è‚É£ Informando endere√ßo...');
      await this.simulateMessage('Fazenda S√£o Jos√©, Zona Rural, Uberaba-MG');
      await this.delay(1000);
      
      // 4. Escolher pe√ßas
      console.log('\n4Ô∏è‚É£ Escolhendo op√ß√£o de pe√ßas...');
      await this.simulateMessage('1');
      await this.delay(1000);
      
      // 5. Informar detalhes da pe√ßa
      console.log('\n5Ô∏è‚É£ Informando detalhes da pe√ßa...');
      await this.simulateMessage('Tenho um compressor Bitzer que a v√°lvula de descarga t√° com problema');
      await this.delay(1000);
      
      // 6. Tentar enviar foto (simular que n√£o consegue)
      console.log('\n6Ô∏è‚É£ Tentando enviar foto...');
      await this.simulateMessage('N√£o consigo tirar foto agora');
      await this.delay(1000);
      
      // 7. Descrever defeito
      console.log('\n7Ô∏è‚É£ Descrevendo defeito...');
      await this.simulateMessage('O compressor t√° fazendo muito barulho e n√£o t√° gelando direito. Come√ßou h√° uns 3 dias');
      await this.delay(1000);
      
      // 8. Escolher finalizar
      console.log('\n8Ô∏è‚É£ Finalizando atendimento...');
      await this.simulateMessage('3');
      
      console.log('\n‚úÖ TESTE CONCLU√çDO COM SUCESSO!');
      console.log('O fluxo de solicita√ß√£o de pe√ßas est√° funcionando corretamente.');
      
    } catch (error) {
      console.error('\n‚ùå ERRO NO TESTE:', error.message);
    }
  }

  // Teste alternativo com foto
  async testPartsFlowWithPhoto() {
    console.log('\nüß™ TESTANDO FLUXO DE PE√áAS COM FOTO');
    console.log('====================================');
    
    const clientNumber = '+5511888888888';
    
    try {
      // 1. Iniciar conversa
      console.log('\n1Ô∏è‚É£ Iniciando conversa...');
      await this.simulateMessage('Ol√°');
      await this.delay(1000);
      
      // 2. Informar nome
      console.log('\n2Ô∏è‚É£ Informando nome...');
      await this.simulateMessage('Maria Santos');
      await this.delay(1000);
      
      // 3. Informar endere√ßo
      console.log('\n3Ô∏è‚É£ Informando endere√ßo...');
      await this.simulateMessage('S√≠tio Boa Vista, Zona Rural, Patos de Minas-MG');
      await this.delay(1000);
      
      // 4. Escolher pe√ßas
      console.log('\n4Ô∏è‚É£ Escolhendo op√ß√£o de pe√ßas...');
      await this.simulateMessage('1');
      await this.delay(1000);
      
      // 5. Informar detalhes da pe√ßa
      console.log('\n5Ô∏è‚É£ Informando detalhes da pe√ßa...');
      await this.simulateMessage('Ar condicionado Carrier que o motor da ventoinha parou de funcionar');
      await this.delay(1000);
      
      // 6. Simular envio de foto
      console.log('\n6Ô∏è‚É£ Simulando envio de foto...');
      await this.simulateMessage('foto'); // Simula que mencionou foto
      await this.delay(1000);
      
      // 7. Continuar sem foto
      console.log('\n7Ô∏è‚É£ Continuando sem foto...');
      await this.simulateMessage('Na verdade n√£o consigo enviar agora');
      await this.delay(1000);
      
      // 8. Descrever defeito
      console.log('\n8Ô∏è‚É£ Descrevendo defeito...');
      await this.simulateMessage('O motor da ventoinha n√£o gira mais, faz um barulho estranho quando liga');
      await this.delay(1000);
      
      // 9. Escolher transferir para humano
      console.log('\n9Ô∏è‚É£ Transferindo para humano...');
      await this.simulateMessage('2');
      
      console.log('\n‚úÖ TESTE COM FOTO CONCLU√çDO COM SUCESSO!');
      
    } catch (error) {
      console.error('\n‚ùå ERRO NO TESTE COM FOTO:', error.message);
    }
  }

  async runTests() {
    console.log('üöÄ INICIANDO TESTES DO FLUXO DE PE√áAS');
    console.log('=====================================');
    
    await this.testPartsFlow();
    await this.delay(2000);
    await this.testPartsFlowWithPhoto();
    
    console.log('\nüéâ TODOS OS TESTES DE PE√áAS CONCLU√çDOS!');
  }
}

// Executar testes se o arquivo for chamado diretamente
if (require.main === module) {
  const tester = new PartsFlowTester();
  tester.runTests().catch(console.error);
}

module.exports = PartsFlowTester;
